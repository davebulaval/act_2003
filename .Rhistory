fitL <- step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname + LogFare, data), direction = "both")
fitL
dataTest <- read.csv('data/Titanic/test.csv', stringsAsFactors = T)
predict(dataTest, fitL)
predict(fitL, dataTest)
View(dataTest)
View(dataTest)
fitL <- step(lm(Age ~ = Pclass + Sex + Fare + Embarked + Surname + LogFare, data), direction = "both")
fitL
fitL <- step(lm(Age ~  Pclass + Sex + Fare + Embarked + Surname + LogFare, data), direction = "both")
fitL
fitL <- step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname + LogFare, data), direction = "both")
fitL
fit <- step(lm(Survived ~ Age + Pclass + Sex + Fare + Embarked + Surname, data), direction = "both")
fit
data$Surname <-sapply(as.character(data$Name),
function(x) strsplit(x, split = '[,]')[[1]][1])
fit <- step(lm(Survived ~ Age + Pclass + Sex + Fare + Embarked + Surname, data), direction = "both")
fit
fit <- step(lm(Survived ~ Age + Pclass + Sex + Fare + Embarked + Surname, data), direction = "both")
fit$residuals
plot(fitL, which=2)
fit <- step(lm(Survived ~ Pclass + Sex + Age+ Fare + Embarked + Surname, data), direction = "both")
fit
fit <- step(lm(Survived ~ Pclass + Sex + Age+ Fare + Embarked + Surname, data), direction = "both")
plot(fit, which=2)
fit <- step(lm(Survived ~ Pclass + Sex + Age + Cabin + Fare + Embarked + Surname, data), direction = "both")
fit <- step(lm(Survived ~ Pclass + Sex + Age + Fare + Embarked + Surname, data), direction = "both")
plot(fit, which=2)
fit <- step(lm(Survived ~ Pclass + Sex + Age + Cabin + Fare + Embarked + Surname, data), direction = "both")
plot(fit, which=2)
fit <- step(lm(Survived ~ Pclass + Sex + Age + SibSp + Cabin + Fare + Embarked + Surname, data), direction = "both")
plot(fit, which=2)
View(data)
View(data)
dataTest$Surname <- as.factor(sapply(as.character(data$Name),
function(x) strsplit(x, split = '[,]')[[1]][1]))
dataTest$Surname <- as.factor(sapply(as.character(dataTest$Name),
function(x) strsplit(x, split = '[,]')[[1]][1]))
dataTest$LogFare <- log(dataTest$Fare)
dataTest$LogFare[dataTest$LogFare == -Inf] <- 0
dataTest$Survived <- sample(x = (0, 1), size = length(dataTest))
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest))
?sample
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest), replace = TRUE)
dataTest
dataTest$PassengerId
length(dataTest$PassengerId)
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest$PassengerId), replace = TRUE)
set.seed(2017)
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest$PassengerId), replace = TRUE)
sum(data$Survived)
sum(dataTest$Survived)
set.seed(20171212121)
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest$PassengerId), replace = TRUE)
set.seed(2017)
set.seed(2016)
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest$PassengerId), replace = TRUE)
sum(data$Survived)
sum(dataTest$Survived)
set.seed(2017)
dataTest$Survived <- sample(x = c(0, 1), size = length(dataTest$PassengerId), replace = TRUE)
write.csv(dataTest, paste('data/Titanic/test.csv',sep = ""),
row.names = FALSE, fileEncoding = "UTF-8")
dataTest <- read.csv('data/Titanic/test.csv', stringsAsFactors = T)
predict(fitL, dataTest)
head(predict(fitL, dataTest))
step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname + LogFare, dataTest), direction = "both")
plot(fit)
plot(fit, which=2)
data$LogFare <- log(data$Fare)
data$LogFare[data$LogFare == -Inf] <- 0
fitL <- step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname + LogFare, data), direction = "both")
data$Surname <- as.factor(sapply(as.character(data$Name),
function(x) strsplit(x, split = '[,]')[[1]][1]))
fit <- step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname, data), direction = "both")
fit
install.packages("scatterplot3d")
# Chunk 1
path <- paste(getwd(),"..",sep = "/")
data <- read.csv('data/Titanic/train.csv', stringsAsFactors = T)
n <- 25
data <- data[1:n,]
# Le modele
resul <- lm(Age ~ Fare, data)
# Affiche le modele avec la droite de regression
plot(data$Fare, data$Age, xlab = "Prix du billet ($)", ylab = "Âge du passager", main = "Âge prédit des passagers du Titanic")
abline(resul, col="red2", lwd = 1.5)
epsi <- c(7, 17)
segments(data$Fare[epsi], data$Age[epsi],  data$Fare[epsi], resul$coefficients[1] + resul$coefficients[2]* data$Fare[epsi], col = "gray8")
# Affichage varepsilone 7
text( x = (data$Fare[7] + data$Fare[7]) / 2, y = (data$Age[7] +  resul$coefficients[1] + resul$coefficients[2]* data$Fare[7]) / 2, col = "gray8", labels = "epsilone_7", pos = 4, cex = 1)
# Affichage varepsilone 17
text( x = (data$Fare[17] + data$Fare[17]) / 2, y = (data$Age[17] +  resul$coefficients[1] + resul$coefficients[2]* data$Fare[17]) / 2, col = "gray8", labels = "epsilone_17", pos = 4, cex = 1)
# Chunk 2
# Le modele
resul <- lm(Age ~ Fare + Pclass, data)
# Affiche le modele avec la droite de regression
library(scatterplot3d)
fig <- scatterplot3d(data$Fare, data$Age, data$Pclass, highlight.3d=TRUE, xlab = "Prix du billet ($)", ylab = "Âge du passager", zlab = "Classe du billet", main = "Âge prédit des passagers du Titanic", angle=55, pch = 16)
fig$plane3d(resul, col = "blue", draw_polygon =  TRUE, draw_lines = FALSE)
# Chunk 3
# Affiche le modele avec la droite de regression
library(scatterplot3d)
fig2 <- scatterplot3d(data$Fare, data$Age, data$Pclass, highlight.3d=TRUE, xlab = "Prix du billet ($)", ylab = "Âge du passager", zlab = "Classe du billet", main = "Âge prédit des passagers du Titanic", angle=-55, pch = 16)
fig2$plane3d(resul, col = "blue", draw_polygon =  TRUE, draw_lines = FALSE)
# Chunk 4
# Les donnees simulees
beta <- 0.051
n <- 100
temp <- data.frame(y = exp(beta * seq(n)) + rgamma(n, 5, 5/50), x = seq(n))
# Affichage des donnees
plot(temp$x, temp$y, xlab = "Temps", ylab = "Sévérité des sinistres", main = "Modèle de prédiction de la sévérité des sinistres" )
# Fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp, start = list(a = 0, b = 0))
# Add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)), col = "red2")
# Chunk 5
# Affichage des donnees
plot(temp$x, temp$y, xlab = "Temps", ylab = "Sévérité des sinistres", main = "Modèle de prédiction de la sévérité des sinistres" )
# Fit non-linear model
mod <- nls(y ~ a + b * x + c * x^2, data = temp, start = list(a = 0, b = 0, c = 0))
# Add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)), col = "red2")
# Chunk 6
# Les donnees simulees
beta <- 0.05
n <- 100
temp <- data.frame(y = exp(beta * seq(n)) + rgamma(n, 5, 5/1), x = seq(n))
temp2 <- data.frame(y = exp(beta * seq(n)) + rgamma(n, 5, 5/50), x = seq(n))
# Affichage des donnees
par(mfrow = c(1,2))
plot(temp2$x, temp2$y, xlab = "Temps", ylab = "Sévérité des sinistres", main = "Modèle de prédiction" )
# Fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp2, start = list(a = 0, b = 0))
# Add fitted curve
lines(temp2$x, predict(mod, list(x = temp2$x)), col = "red2")
plot(temp$x, temp$y, xlab = "Temps", ylab = "Sévérité des sinistres", main = "Modèle de prédiction réajusté" )
# Fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp, start = list(a = 0, b = 0))
# Add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)), col = "red2")
# Chunk 7
# Le modele
resul <- lm(Age ~ Fare, data)
# Affiche le modele avec la droite de regression
plot(data$Fare, data$Age, xlab = "Prix du billet ($)", ylab = "Âge du passager", main = "Âge prédit des passagers du Titanic")
abline(resul, col="red2", lwd = 1.5)
epsi <- c(7, 17)
segments(data$Fare[epsi], data$Age[epsi],  data$Fare[epsi], resul$coefficients[1] + resul$coefficients[2]* data$Fare[epsi], col = "gray8")
# Affichage varepsilone 7
text( x = (data$Fare[7] + data$Fare[7]) / 2, y = (data$Age[7] +  resul$coefficients[1] + resul$coefficients[2]* data$Fare[7]) / 2, col = "gray8", labels = "epsilone_7", pos = 4, cex = 1)
# Affichage varepsilone 17
text( x = (data$Fare[17] + data$Fare[17]) / 2, y = (data$Age[17] +  resul$coefficients[1] + resul$coefficients[2]* data$Fare[17]) / 2, col = "gray8", labels = "epsilone_17", pos = 4, cex = 1)
# Chunk 8
# Le modele
resul <- lm(Age ~ Fare, data, na.action = na.omit)
# Affiche le modele avec la droite de regression
plot(data$Fare, data$Age, xlab = "Prix du billet ($)", ylab = "Âge du passager", main = "Représentation du \n centre de masse")
xbarre <- sum(data$Fare) / length(data$Fare)
ybarre <- sum(data$Age, na.rm = TRUE) / length(data$Age[!is.na(data$Age)]) ## Correction arbitraire pour les valeurs NA
abline(resul, col="red2", lwd = 1.5)
points(xbarre, ybarre, pch = 20)
segments(xbarre, ybarre,  xbarre, 0, col = "gray8")
segments(xbarre, ybarre,  0, ybarre, col = "gray8")
# Affichage varepsilone 7
text( x = xbarre, y = 0, col = "blue", labels = "XBarre", pos = 3, cex = 1)
# Affichage varepsilone 17
text( x = 3, y = ybarre + 2, col = "blue", labels = "YBarre", pos = 4, cex = 1)
# Chunk 10
# dataset
# X Km parcourus
# Y consommation essence en L
simul <- 500
alpha <- 1
beta <- alpha/5.1
y <- rgamma(simul, alpha, beta)
x <- runif(simul, 0, 550)
# Estimation de beta.
reg <- lm(y ~ x - 1)
plot(x, y, xlab = "Nombre de Km", ylab = "Consommation (L)", main= "Modèle d'analyse de la \n consommation d'essence")
abline(reg, col="red2", lwd = 1.5)
# Chunk 12
# Exemple de mauvaise explication
x <- seq(0, 9, 1)
y <- c(1.99, 2.1, 1.9, 2, 2.1, 1.9, 2.1, 2, 2, 2)
# Affichage graphe
par(mfrow = c(1,2))
resul <- lm(y ~x)
plot(x, y, xlab = "X_t", ylab = "Y_t", main = "Échantillon 1")
abline(resul, col="red2", lwd = 1.5)
# Exemple de bonne explication
x2 <- seq(0, 9, 1)
y2 <- seq(0, 9, 1)
resul2 <- lm(y2 ~ x2)
plot(x2, y2, xlab = "X_t", ylab = "Y_t", main = "Échantillon 2")
abline(resul2, col="red2", lwd = 1.5)
# Chunk 13
residusMauvais <- list()
residusMauvais$residusMauvaisFit <- fitted(resul)[1:10]
residusMauvais
residusBon <- list()
residusBon$residusBonFit <- fitted(resul2)[1:10]
residusBon
# Chunk 14
library(ggplot2)
myfun <- function(xvar) {
-1*xvar + 5
}
# Ajout segment de droite (fonction)
p <- ggplot(data.frame(x=c(0, 10)), aes(x=x)) + stat_function(fun=myfun, geom="line", color = "red")
# Ajout texte et fleche
p <- p + annotate("text", x=8.5, y=0, parse=TRUE, size=4,
label="'Droite de \n régression'")
p <- p + annotate("segment", x=8, xend=7.5, y=-0.5, yend=-2.5, color = "blue",
arrow=arrow())
# Ajout texte sur axes
p <- p + annotate("text", x=5, y=-5.5, parse=TRUE, size=4, label="bar(X)") + annotate("text", x=2.5, y=-5.5, parse=TRUE, size=4, label="X[t]")
p <- p + annotate("text", x=0, y=0, parse=TRUE, size=4, label="bar(Y)") + annotate("text", x=0, y=4.5, parse=TRUE, size=4, label="Y[t]")
# Ajout "accolade" sur le graphe et texte
p <- p + annotate("segment", x=0.75, xend=0.75, y=0, yend=4.5,
arrow=arrow(ends="both", angle=90, length=unit(.2,"cm"))) + annotate("text", x=1.3, y=2, parse=TRUE, size=4,
label="Y[t] -  bar(Y)")
p <- p + annotate("segment", x=2.5, xend=2.5, y=0, yend=2.5,
arrow=arrow(ends="both", angle=90, length=unit(.2,"cm"))) + annotate("text", x=3.1, y=1, parse=TRUE, size=4,
label="hat(Y)[t] -  bar(Y)")
p <- p + annotate("segment", x=2.5, xend=2.5, y=2.5, yend=4.5,
arrow=arrow(ends="both", angle=90, length=unit(.2,"cm"))) + annotate("text", x=3.1, y=3.5, parse=TRUE, size=4,
label="Y[t] - hat(Y)[t]")
# Ajout des segments pointilles
p <- p + geom_segment(aes(x=0.1, xend=5, y=0, yend=0),
arrow=arrow(length=unit(0.4,"cm"), ends="both", angle=360), linetype=2)
p <- p + geom_segment(aes(x=5, xend=5, y=-6, yend=0),
arrow=arrow(length=unit(0.4,"cm"), ends="both", angle=360), linetype=2)
# Ajout des points
p <- p + geom_point(aes(2.5, 2.5))  +  geom_point(aes(2.5, 4.5)) + geom_point(aes(5, 0)) + annotate("text", x=5.5, y=0.5, parse=TRUE, size=4,
label="(bar(X) * ', ' * bar(Y))")
p
# Chunk 16
dnorm_limit <- function(x) {
y <- dnorm(x)
y[x<2 & x > - 2] <- NA
return(y)
}
# Ajout graphe
p <- ggplot(data.frame(x=c(-3, 3)), aes(x=x))
# Ajout section de couleur et courbe
p <- p + stat_function(fun=dnorm_limit, geom="area", fill="blue", alpha=0.45) + stat_function(fun=dnorm, size = 1)
# Ajout text alpha/2
p <- p + annotate("text", x=-2.5, y=0.05, parse=TRUE, size=3, label="frac(alpha, 2)") + annotate("text", x=2.5, y=0.05, parse=TRUE, size=3, label="frac(alpha, 2)")
# Ajout droite au centre
p <- p + annotate("segment", x=0, xend=0, y=0, yend=0.42, size=1.5, arrow=arrow(length=unit(.35,"cm")))
p
# Chunk 17
dnorm_limit <- function(x) {
y <- dnorm(x)
y[x > - 1.5] <- NA
return(y)
}
# Ajout graphe
p <- ggplot(data.frame(x=c(-3, 3)), aes(x=x))
# Ajout section de couleur et courbe
p <- p + stat_function(fun=dnorm_limit, geom="area", fill="blue", alpha=0.45) + stat_function(fun=dnorm, size = 1)
# Ajout text alpha/2
p <- p + annotate("text", x=-2.5, y=0.05, parse=TRUE, size=3, label="alpha")
# Ajout droite au centre
p <- p + annotate("segment", x=0, xend=0, y=0, yend=0.42, size=1.5, arrow=arrow(length=unit(.35,"cm")))
p
# Chunk 18
myfun <- function(xvar) {
1*xvar + 5
}
# Parameter risk
# Ajout segment de droite (fonction)
p <- ggplot(data.frame(x=c(0, 10)), aes(x=x)) + stat_function(fun=myfun, geom="line", color = "red")
# Ajout des segments pointilles beta_0
p <- p + geom_segment(aes(x=0, xend=10, y=7.5, yend=17.5),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
p <- p + geom_segment(aes(x=0, xend=10, y=2.5, yend=12.5),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
# Ajout segment pointile beta_1
p <- p + geom_segment(aes(x=7.5, xend=10, y=12.5, yend=12.5),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2, color = "red")
# Ajout accolade I.C. beta_0 + texte
p <- p + annotate("segment", x=2.5, xend=2.5, y=5, yend=10,
arrow=arrow(ends="both", angle=90, length=unit(.1,"cm"))) + annotate("text", x=2.6, y=7.5, parse=TRUE, size=3,
label="'I.C. de ' * beta[0]")
# Ajout accolade I.C. beta_1 + texte
p <- p + annotate("segment", x=8.75, xend=8.75, y=12.5, yend=13.75,
arrow=arrow(ends="both", angle=90, length=unit(.1,"cm"))) + annotate("text", x=8.9, y=13.25, parse=TRUE, size=3,
label="'I.C. de ' * beta[1]")
# Nom axe X
p <- p + xlab("Parameter risk")
p
# Chunk 19
# Process risk
# Ajout segment de droite (fonction)
p <- ggplot(data.frame(x=c(0, 10)), aes(x=x)) + stat_function(fun=myfun, geom="line", color = "red")
# Ajout points
p <- p + geom_point(aes(2.5, 10))  +  geom_point(aes(5, 7.5)) + geom_point(aes(7.5, 13.75))
# Ajout accolades
p <- p + annotate("segment", x=2.5, xend=2.5, y=7.5, yend=10, arrow=arrow(ends="both", angle=90, length=unit(.1,"cm"))) +
annotate("segment", x=5, xend=5, y=7.5, yend=10, arrow=arrow(ends="both", angle=90, length=unit(.1,"cm"))) +
annotate("segment", x=7.5, xend=7.5, y=12.5, yend=13.75, arrow=arrow(ends="both", angle=90, length=unit(.1,"cm")))
# Nom axe X
p <- p + xlab("Process risk")
p
# Chunk 20
# Combinaison des deux effets
# Ajout segment de droite (fonction)
p <- ggplot(data.frame(x=c(0, 10)), aes(x=x)) + stat_function(fun=myfun, geom="line", color = "red")
# Ajout segment pointile beta_1
p <- p + geom_segment(aes(x=7.5, xend=10, y=12.5, yend=12.5),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2, color = "red")
# Ajout accolade beta_0 + texte
p <- p + annotate("segment", x=2.5, xend=2.5, y=5, yend=10,
arrow=arrow(ends="both", length=unit(.3,"cm"))) + annotate("text", x=2.6, y=7.5, parse=TRUE, size=3,
label="'Parameter risk de ' * beta[0]")
# Ajout accolade beta_1 + texte
p <- p + annotate("segment", x=8.75, xend=8.75, y=12.5, yend=13.75,
arrow=arrow(ends="both", angle=90, length=unit(.1,"cm"))) + annotate("text", x=7.5, y=13.25, parse=TRUE, size=3,
label="'Parameter risk de ' * beta[1]")
# Ajout points
p <- p +  geom_point(aes(5, 7.5))
# Ajout accolades
p <- p + annotate("segment", x=5, xend=5, y=7.5, yend=10, arrow=arrow(ends="both", angle=90, length=unit(.1,"cm"))) +
annotate("text", x=5.1, y=8.75, parse=TRUE, size=3, label="'Process risk'")
p
# Chunk 21
# Parameter risk
# Ajout segment de droite (fonction)
p <- ggplot(data.frame(x=c(0, 10)), aes(x=x))  + geom_segment(aes(x=0, xend=15, y=5, yend=15), arrow=arrow(length=unit(0,"cm"), angle=180), linetype=1, color ="red")
# Ajout des segments pointilles pour "parabolle"
p <- p + geom_curve(aes(x=3.75, xend=15, y=5, yend=12.5), curvature = -0.2,
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
p <- p + geom_curve(aes(x=0, xend=10, y=7, yend=15),  curvature = 0.2,
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
# Ajout texte sur axes
p <- p + annotate("text", x=7.5, y=5, parse=TRUE, size=3, label="bar(X)") + annotate("text", x=2.5, y=5, parse=TRUE, size=3, label="X^'*'")
p <- p + annotate("text", x=0, y=10, parse=TRUE, size=3, label="bar(Y)") + annotate("text", x=0, y=6.685, parse=TRUE, size=3, label="'E[' * hat('Y'^'*') * ']' ")
# Ajout texte droite de régression
p <-  p + annotate("text", x = 11, y = 13,  parse=TRUE, size=3, label="'Y'[t] * '=' * hat(beta)[0] + hat(beta)[1] * 'X'[t]")
# Ajout des points
p <- p + geom_point(aes(7.5, 10)) + geom_point(aes(2.5, 6.685))
p <- p + ylab("Y")
p
# Chunk 22
# dataset
x <- rnorm(15)
y <- x + rnorm(15)
xStar <- data.frame(x = seq(0, 2, by = 0.2))
# Modèle de régression
fit <- lm(y ~x)
# I.C. de type 1
predict(fit, interval = "confidence")[1:5,] # I.C. pour tous les X dans les observations
# Chunk 23
predict(fit, interval = "confidence", newdata = xStar)[1:5,] # I.C. pour un vecteur de X^*
# Chunk 24
# I.C. de type 2
predict(fit, interval = "prediction", newdata = xStar)[1:5,] # I.C. pour un vecteur de x^*
# Chunk 26
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 6)), aes(x=x))
# Ajout du segment
p <- p + geom_segment(aes(x=0, xend=3, y=8, yend=5),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1)
# Ajout des points
p <- p + geom_point(aes(0, 8))  +  geom_point(aes(1, 7)) + geom_point(aes(2, 6)) + geom_point(aes(3, 5))
p <- p + xlab("Itérations") + ylab("Nombre de variables")
# Ajout texte sur axes
p <- p + annotate("text", x=2.9, y=0, parse=TRUE, size=3, label="'Modèle \n optimal'")
p
# Chunk 27
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 6)), aes(x=x))
# Ajout du segment
p <- p + geom_segment(aes(x=0, xend=3, y=0, yend=3),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1)
# Ajout des points
p <- p + geom_point(aes(0, 0))  +  geom_point(aes(1, 1)) + geom_point(aes(2, 2)) + geom_point(aes(3, 3))
p <- p + xlab("Itérations") + ylab("Nombre de variables")
# Ajout texte sur axes
p <- p + annotate("text", x=2.9, y=0, parse=TRUE, size=3, label="'Modèle \n optimal'")
p
# Chunk 28
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 6)), aes(x=x))
# Ajout des segments
p <- p + geom_segment(aes(x=0, xend=2, y=0, yend=2),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1) +
geom_segment(aes(x=2, xend=3, y=2, yend=1),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1) +
geom_segment(aes(x=3, xend=5, y=1, yend=3),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1) +
geom_segment(aes(x=5, xend=6, y=3, yend=2),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1) +
geom_segment(aes(x=6, xend=7, y=2, yend=3),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1) +
geom_segment(aes(x=7, xend=8, y=3, yend=2),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=1)
# Ajout des points
p <- p + geom_point(aes(0, 0))  +  geom_point(aes(1, 1)) + geom_point(aes(2, 2)) + geom_point(aes(3, 1)) + geom_point(aes(4, 2)) +
geom_point(aes(5, 3)) + geom_point(aes(6, 2))  + geom_point(aes(7, 3)) + geom_point(aes(8, 2))
p <- p + xlab("Itérations") + ylab("Nombre de variables")
# Ajout texte sur axes
p <- p + annotate("text", x=7.9, y=0, parse=TRUE, size=3, label="'Modèle \n optimal'")
p
# Chunk 29
step(lm(mpg~wt+drat+disp+qsec+hp,data=mtcars),direction="both")
# Chunk 31
x <- runif(15, 0, 5)
y <- runif(15, -2, 4)
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 6)), aes(x=x))
# Ajout point
p <- qplot(x, y)
# Ajout des segments
p <- p + geom_segment(aes(x=-1, xend=7, y=4, yend=4),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=2) +
geom_segment(aes(x=-1, xend=7, y=-2, yend=-2),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=2)
# Ajout des axes
p <- p + xlab(expression(hat(Y)[t])) + ylab(expression(epsilon[t])) + coord_cartesian(xlim=c(-1, 6), ylim=c(-3, 5))
p
# Chunk 32
set.seed(2017)
x <- runif(15, 0, 5)
y <- runif(15) * x/1.3
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 6)), aes(x=x))
# Ajout point
p <- qplot(x, y)
# Ajout des segments
p <- p + geom_segment(aes(x=0, xend=5, y=2, yend=4),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=2) +
geom_segment(aes(x=0, xend=5, y=-1, yend=1),
arrow=arrow(length=unit(0,"cm"),  angle=360), linetype=2)
# Ajout des axes
p <- p + xlab(expression(hat(Y)[t])) + ylab(expression(epsilon[t]))
p
# Chunk 33
set.seed(2017)
x <- c(runif(8, 0, 4), runif(30, 4, 10), runif(8, 10, 15))
y <- c(c(4.25, 3.2, 3.5, 4, 4.1, 4.2, 4.38, 3.5), runif(30, 1.5, 3.83), c(4.128, 4, 4.4, 4.1, 4.1, 4.05, 4.7, 3.9999))
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 15)), aes(x=x))
# Ajout point
p <- qplot(x, y)
# Ajout des segments
p <- p + geom_curve(aes(x=0, xend=15, y=8, yend=8), curvature = 1,
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2) +
geom_curve(aes(x=0, xend=15, y=5, yend=5), curvature = 1,
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
# Ajout des axes
p <- p + xlab(expression(hat(Y)[t])) + ylab(expression(epsilon[t])) + coord_cartesian(xlim=c(0, 15), ylim=c(0, 9))
p
# Chunk 34
set.seed(2017)
x <- runif(100, 0, 15) + rnorm(100, 0, 4)
y <- runif(100, 2.5, 5.5) * x/8
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 15)), aes(x=x))
# Ajout point
p <- qplot(x, y)
# Ajout des segments
p <- p + geom_segment(aes(x=0, xend=15, y=0, yend=10),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2) +
geom_segment(aes(x=0, xend=16, y=0, yend=4.5),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
# Ajout des axes
p <- p + xlab(expression(hat(Y)[t])) + ylab(expression(epsilon[t])) + coord_cartesian(xlim=c(0, 15), ylim=c(0, 9))
p
# Chunk 35
x <- seq(0, 5, 0.5)
y <- c(0, 0.6, 0.9, 1.43, 2.12, 2.5, 3.09, 3.468, 4, 4.5123, 5.05656)
# Ajout graphe
p <- ggplot(data.frame(x=c(0, 15)), aes(x=x))
# Ajout des points
p <- qplot(x, y)
# Ajout des segments
p <- p + geom_segment(aes(x=0, xend=5, y=0, yend=5),
arrow=arrow(length=unit(0,"cm"), angle=180), linetype=2)
# Ajout des points
p <- p + xlab(expression(hat(Y)[t])) + ylab(expression(phi1^{-1} *(F[epsilon[t]]())) ) + coord_cartesian(xlim=c(0, 5), ylim=c(0, 5))
p
# Chunk 36
data <- read.csv('data/Titanic/train.csv', stringsAsFactors = T)
summary(data)
# Chunk 37
data$Surname <- as.factor(sapply(as.character(data$Name),
function(x) strsplit(x, split = '[,]')[[1]][1]))
# Chunk 38
# Visualiser les 6 premières observations par catégorie
head(summary(data$Surname))
# Chunk 39
fit <- step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname, data),
direction = "both")
fit
# Chunk 40
# Q-Q plot
plot(fit, which=2)
# Chunk 41
data$LogFare <- log(data$Fare)
data$LogFare[data$LogFare == -Inf] <- 0
fitL <- step(lm(Age ~ Survived + Pclass + Sex + Fare + Embarked + Surname + LogFare, data), direction = "both")
fitL
plot(fitL, which=2)
# Chunk 42
# Import data
dataTest <- read.csv('data/Titanic/test.csv', stringsAsFactors = T)
# Chunk 43
head(predict(fitL, dataTest))
